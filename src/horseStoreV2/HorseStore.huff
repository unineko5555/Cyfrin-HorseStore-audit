/* Import */
#include "../../lib/huffmate/src/data-structures/Hashmap.huff"

/* HorseStore Interface */
#define function mintHorse() nonpayable returns()
#define function feedHorse(uint256) nonpayable returns()
#define function isHappyHorse() view returns(bool)
#define function horseToFedTimeStamp(uint256) view returns(uint256)
#define function HORSE_HAPPY_IF_FED_WITHIN() view returns(uint256)

// Storage Slot 
// storage slot for the mapping
#define constant HORSE_FED_TIMESTAMP_LOCATION = FREE_STORAGE_POINTER()

#define macro GET_HORSE_FED_TIMESTAMP() = takes(0) returns() {
    0x04 calldataload                       // [horseId]
    [HORSE_FED_TIMESTAMP_LOCATION]          // [HORSE_FED_TIMESTAMP_LOCATION, horseid]                  
    LOAD_ELEMENT_FROM_KEYS(0x00)            // [horseId]

    0x00 mstore                             // []   // Memory: [0x00: horseFedTimestamp]
    0x20 0x00 return                        // []
} 

// 0xfunc_selector uint256
#define function FEED_HORSE() = takes(0) returns(0) {
    timestamp                               // [timestamp]
    0x04 calldataload                       // [horseId, timestamp]
    // sstore the timestamp with the horseId key
    [HORSE_FED_TIMESTAMP_LOCATION]          // [HORSE_FED_TIMESTAMP_LOCATION, hoseId, timestamp]        
    STORE_ELEMENT_FROM_KEYS(0x00)           // []
    stop
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr              // [function_selector]

    dup1 __FUNC_SIG(mintHorse) eq mintHorse jumpi
    dup1 __FUNC_SIG(feedHorse) eq feedHorse jumpi
    dup1 __FUNC_SIG(isHappyHorse) eq isHappyHorse jumpi
    dup1 __FUNC_SIG(horseIdToFedTimeStamp) eq horseIdToFedTimeStamp jumpi
    dup1 __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN) eq horseHappyFedWithin jumpi

    feedHorse:
        FEED_HORSE()
    mintHorse:
        MINT_HORSE()
    isHappyHorse:
        IS_HAPPY_HORSE()
    horseIdToFedTimeStamp:
        GET_HORSE_FED_TIMESTAMP()
    horseHappyFedWithin:
        HORSE_HAPPY_FED_WITHIN()
    

} 